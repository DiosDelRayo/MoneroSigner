diff --git a/requirements.txt b/requirements.txt
index 7562809..1858ebf 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -9,4 +9,3 @@ RPi.GPIO==0.7.0
 six==1.16.0
 spidev==3.5
 urtypes @ git+https://github.com/jreesun/urtypes.git@e0d0db277ec2339650343eaf7b220fffb9233241
-py-cryptonight=1.0.0
diff --git a/src/main.py b/src/main.py
index dfeda0c..5772a17 100644
--- a/src/main.py
+++ b/src/main.py
@@ -1,7 +1,7 @@
 # first show we are alive!
 from xmrsigner.hardware.ST7789 import ST7789
 from PIL import Image, ImageDraw, ImageFont
-dispaly = ST7789()
+display = ST7789()
 display.reset()
 # here we need to generate brief some image 240x240px, or smaller and ajust x/y
 image: Image = Image.new('RGB', (240, 240), 'white')
diff --git a/src/xmrsigner/controller.py b/src/xmrsigner/controller.py
index 991609a..976eae4 100644
--- a/src/xmrsigner/controller.py
+++ b/src/xmrsigner/controller.py
@@ -284,7 +284,7 @@ class Controller(Singleton):
                 print("-" * 30)
 
         finally:
-            if self.screensaver.is_running:
+            if self.is_screensaver_running:
                 self.screensaver.stop()
 
             # Clear the screen when exiting
diff --git a/src/xmrsigner/gui/components.py b/src/xmrsigner/gui/components.py
index 03cb108..91358b4 100644
--- a/src/xmrsigner/gui/components.py
+++ b/src/xmrsigner/gui/components.py
@@ -8,7 +8,7 @@ from dataclasses import dataclass
 from decimal import Decimal
 from PIL import Image, ImageDraw, ImageFont, ImageFilter
 from xmrsigner.helpers.pillow import get_font_size
-from typing import List, Tuple
+from typing import List, Tuple, Dict
 
 from xmrsigner.models.settings import Settings
 from xmrsigner.models.settings_definition import SettingsConstants
@@ -1364,7 +1364,7 @@ def reflow_text_for_width(text: str,
                           width: int,
                           font_name=GUIConstants.BODY_FONT_NAME,
                           font_size=GUIConstants.BODY_FONT_SIZE,
-                          allow_text_overflow: bool=False) -> list[dict]:
+                          allow_text_overflow: bool=False) -> List[Dict]:
     """
     Reflows text to fit within `width` by breaking long lines up.
 
@@ -1450,7 +1450,7 @@ def reflow_text_into_pages(text: str,
                            font_name=GUIConstants.BODY_FONT_NAME,
                            font_size=GUIConstants.BODY_FONT_SIZE,
                            line_spacer: int = GUIConstants.BODY_LINE_SPACING,
-                           allow_text_overflow: bool=False) -> list[str]:
+                           allow_text_overflow: bool=False) -> List[str]:
     """
     Invokes `reflow_text_for_width` above to convert long text into width-limited
     individual text lines and then calculates how many lines will fit on a "page"and groups the output accordingly.
diff --git a/src/xmrsigner/hardware/ST7789.py b/src/xmrsigner/hardware/ST7789.py
index ff4438f..4b40307 100644
--- a/src/xmrsigner/hardware/ST7789.py
+++ b/src/xmrsigner/hardware/ST7789.py
@@ -2,6 +2,7 @@ from spidev import SpiDev
 import RPi.GPIO as GPIO
 from time import sleep
 from array import array
+from PIL import Image
 
 
 
diff --git a/src/xmrsigner/hardware/buttons.py b/src/xmrsigner/hardware/buttons.py
index 440c9e5..64e7369 100644
--- a/src/xmrsigner/hardware/buttons.py
+++ b/src/xmrsigner/hardware/buttons.py
@@ -1,5 +1,6 @@
 import RPi.GPIO as GPIO
 from time import time, sleep
+from typing import List
 
 from xmrsigner.models.singleton import Singleton
 
diff --git a/src/xmrsigner/hardware/microsd.py b/src/xmrsigner/hardware/microsd.py
index 3925537..5af9bf5 100644
--- a/src/xmrsigner/hardware/microsd.py
+++ b/src/xmrsigner/hardware/microsd.py
@@ -43,14 +43,13 @@ class MicroSD(Singleton, BaseThread):
 
 
     def run(self):
-        from seedsigner.controller import Controller
-        from seedsigner.gui.toast import SDCardStateChangeToastManagerThread
+        from xmrsigner.controller import Controller
         action = ""
         
         action = ""
         
         # explicitly only microsd add/remove detection in seedsigner-os
-        if Settings.HOSTNAME == Settings.SEEDSIGNER_OS:
+        if Settings.HOSTNAME == Settings.XMRSIGNER_OS:
 
             # at start-up, get current status and inform Settings
             Settings.handle_microsd_state_change(
@@ -68,6 +67,5 @@ class MicroSD(Singleton, BaseThread):
                     print(f"fifo message: {action}")
 
                     Settings.handle_microsd_state_change(action=action)
-                    Controller.get_instance().activate_toast(SDCardStateChangeToastManagerThread(action=action))
 
                 sleep(0.1)
diff --git a/src/xmrsigner/views/view.py b/src/xmrsigner/views/view.py
index 2963fb6..06fd180 100644
--- a/src/xmrsigner/views/view.py
+++ b/src/xmrsigner/views/view.py
@@ -1,5 +1,5 @@
 from dataclasses import dataclass
-from typing import Type, List, Dict
+from typing import Type, List, Dict, Union
 
 from xmrsigner.gui.components import FontAwesomeIconConstants, IconConstants
 from xmrsigner.gui.screens.screen import (
@@ -105,7 +105,7 @@ class View:
     def get_redirect(self) -> 'Destination':
         return self._redirect
 
-    def run_screen(self, Screen_cls: Type[BaseScreen], **kwargs) -> int | str:
+    def run_screen(self, Screen_cls: Type[BaseScreen], **kwargs) -> Union[int, str]:
         """
             Instantiates the provided Screen_cls and runs its interactive display.
             Returns the user's input upon completion.
@@ -345,7 +345,7 @@ class NotYetImplementedView(View):
 @dataclass
 class UnhandledExceptionView(View):
 
-    error: list[str]
+    error: List[str]
 
     def run(self) -> None:
         self.run_screen(
