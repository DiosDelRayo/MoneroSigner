[12:04] <vthor> Hey jeffro256 :) ruckmium_ told me I should consult you about what I can all fuck up for the user with MoneroSigner, do you have maybe in the next two days some time to talk about?
[12:05] --> xFFFC0000 (uid629468@id-629468.ilkley.irccloud.com) has joined this channel.
[12:05] <m-relay> <r​ucknium:monero.social> jeffro256: I don't think it's worth it. If someone is using monero-wallet-rpc programatically, the code already knows how many addresses they are sending to. If they want "all", then just make an array 1,2,...,N as the parameter.
[12:06] <m-relay> <r​ucknium:monero.social> vthor: Another possible problem I thought of: Insufficient entropy on wallet generation can allow thieves to steal from even airgapped wallets.
[12:06] <m-relay> <r​ucknium:monero.social> Thanks for following up with jeffro :)
[12:07] <vthor> entropy comes mostly vom the sha256 of the cam stream, or external from dices, you can choose your seed words only if you enable before 'low security'
[12:10] <vthor> rucknium: So, I use the same method for seed generation (without modification as seedsigner, except that I disable bring your own seed (without checksum) by default, because this is a perfect way for the user to shot his own foot. (so it is possible only after switch to 'low security and then the user gets shown a warning)
[12:12] <vthor> I do usualy what I'm saying. I'm only some time too busy to do it directly.
[12:15] <m-relay> <r​ucknium:monero.social> Sounds good to me. Of course, the Monero seed words are different from bitcoin seed words. You just need to convert things correctly.
[12:15] <m-relay> <r​ecanman:kernal.eu> vthor monero-python and monerophp have pretty straightforward implementations of generating monero seeds and encoding/decoding
[12:21] <vthor> And was still searching how to contact jeffro256....
[12:22] <m-relay> <j​effro256:monero.social> That was my thought exactly
[12:23] <vthor> recanman, I use the random and feed it like `monero.seed.Seed(hexlify(random_32_bytes_from_sha256)).phrase` to generate the monero seed, polyseed is don similar
[12:23] <m-relay> <j​effro256:monero.social> @vthor: hi! Yeah I'd be down to chat about it. I won't claim that I can enumerate all possible failure points though..
[12:23] <m-relay> <r​ecanman:kernal.eu> Looks good vthor
[12:23] <m-relay> <r​ecanman:kernal.eu> Your source of entropy is the camera?
[12:24] --> rbrunner (~rbrunner@2a00:9fe0:0:15::1:661) has joined this channel.
[12:25] <vthor> yes it is the whole stream fed to the camera and at the and added the still image shot, +some hardware-id from the pi
[12:26] <vthor> in case of dices entropy comes from extern, but I wonder how many people will that actually do....
[12:26] <m-relay> <r​ecanman:kernal.eu> Just wondering, why not /dev/urandom?
[12:26] <vthor> on the pi?
[12:26] <m-relay> <s​trawberry:monero.social> reminds me of some bitcoin hardware wallet that let you roll a dice hundreds of times for entropy
[12:26] <vthor> I could throw it additionally inside
[12:27] <vthor> strawberry: exactly that with dices.
[12:27] <m-relay> <s​trawberry:monero.social> and they had a python script to reproduce the seed from the rolls, to prove the firmware isnt evil
[12:27] <m-relay> <r​ecanman:kernal.eu> I would recommend that vthor, I'm not sure if you're getting sensor data from the camera or the normalized image itself
[12:27] <vthor> yes, is the same method (seedsigner), its only a modification from btc to xmr strawberry
[12:28] <m-relay> <j​effro256:monero.social> You should include /dev/urandom. It's usually a bad idea idea to rely on one source of unproved randomness
[12:28] <m-relay> <r​ecanman:kernal.eu> https://security.stackexchange.com/questions/42428/is-generating-random-numbers-using-a-smartphone-camera-a-good-idea
[12:29] <vthor> recanman: would need to check again, how it is done.
[12:29] <m-relay> <s​trawberry:monero.social> oh im blind, this already works with dices?
[12:29] <vthor> yes
[12:29] <m-relay> <r​ecanman:kernal.eu> I concur with jeffro, urandom is 'proven' as it is used as cryptographically-secure source of entropy
[12:29] <m-relay> <s​trawberry:monero.social> realistically the camera data is fine, but reproducible with dice rolls is good for paranoid users
[12:30] <m-relay> <j​effro256:monero.social> This answer gets into why just using a camera can fail: https://security.stackexchange.com/questions/42428/is-generating-random-numbers-using-a-smartphone-camera-a-good-idea/42430#42430
[12:31] <m-relay> <s​trawberry:monero.social> is this meant to run on a pi? haven't been following
[12:31] <m-relay> <j​effro256:monero.social> Many sensors are designed to smooth out the signals they receive, same with firmware processors, and post-processors. Unless you know at a hardware level that you are getting raw values, the image data will likely be smoothed which decreases entropy
[12:31] <vthor> jeffro256, will do that, maybe it is already the case, need to check, but before ready for production will defenitly throw urandom there inside although not trusting urandom on pi (but how it is simply fed into sha256 I'n my understanding it should not f.. up the entropy as long it is not more then 50%, or I'm wrong?
[12:31] <m-relay> <r​ucknium:monero.social> So the original bitcoin seedsigner code isn't as good as it could be?
[12:34] <vthor> rucknium: I personaly think it is sound if you let the stream of the cam long enough moving the camera around - well, one should maybe not do it in complete darkness how the only entropy would then be the noise and pixel errors of the sensor.
[12:34] <m-relay> <r​ecanman:kernal.eu> I would think that a proven source of entropy be used as a minimum
[12:34] <m-relay> <j​effro256:monero.social> @vthor: Theoretically, adding randomness and throwing it into a random oracle will never decrease entropy, so a perfect hash function will at least preserve entropy. In practice, cryptographic-ally secure hash functions are not perfect random oracles, but for most use cases, combining both image data and output from /dev/urandom  and passing it to a secure hash function most likel<clipped message>
[12:34] <m-relay> <j​effro256:monero.social> y won't make things worse, and will help in most cases
[12:35] <m-relay> <r​ecanman:kernal.eu> I would think that a proven source of entropy should be used as a minimum
[12:36] <vthor> jeffro256: thanks for conferming that, but now I wonder, so lets say I throw 100bits of entropy and 1 million zero-bytes throuh a sha256 stream, so the 100bits of entropy are still 100bits of entropy?
[12:37] <m-relay> <r​ecanman:kernal.eu> If sha256 is a cryptographically secure hash function then the answer would be yes
[12:38] <m-relay> <r​ecanman:kernal.eu> I'm not sure if it is considered one or not, just clarifying
[12:40] <vthor> In my last discousion with crytographers in #crypto and ##math they told me it is fine.
[12:41] <vthor> in case of polyseed if goes through pkdf aragon2 to create the seed, while for monero seed my knowledge ends from delivering the random to monero.seed.Seed
[12:42] --> jabster28 (~jabster28@87.254.0.133) has joined this channel.
[12:47] <m-relay> <j​effro256:monero.social> One method that could be more secure and more easily verifiable for paranoid users, while not requiring a camera is to 1) attach a hardware random number generator to the raspberry PI 2) attach a small num 0-9 pad and let the user whale on the numpad for however long they want. Then show the user the result of 1) and 2), and a hash of both, The hash will be used as the seed, but t<clipped message>
[12:47] <m-relay> <j​effro256:monero.social> he user can at least check that the seed is cryptographically bound (i.e: a function of, has at least as much entropy as) to their random mashing of the numpad. Also, if the user enters nothing into the numpad, the hardware random number generator will make sure that there is true randomness, not relying on the details of photo capturing
[12:48] <vthor> there is btw the linux emulator executable https://github.com/DiosDelRayo/MoneroSigner/releases/download/v0.3.1/xmrsigner-0.3.1_x86_64_linux, win32 I still need to do, but probably will skip for the moment becaue I want first to have a working image for the build chain for the pi.
[12:49] <m-relay> <j​effro256:monero.social> Some paranoid users may also not like that the camera could capture their face accidentally
[12:50] <vthor> jeffro256, who would do that? (only wonder) I would boot tails get monero-cli/gui and create a wallet, wrote down my seed, unplug the usb and walk away....
[12:51] <m-relay> <j​effro256:monero.social> Who would do which part ?
[12:51] <vthor> jeffro256, you need to mega paranoid, on a device you (can) take the microSD off and all is gone and bt/wifi is deactivated (you only can be sure if you castrate hardware wise)
[12:54] <m-relay> <j​effro256:monero.social> With a camera, if the device is comprised, then your facial data and seed are potentially leaked. Without a camera, just your seed is lpotentially eaked
[12:55] <vthor> my scope is to deliver the MoneroSigner fork that was promised, but seriously, with all what I'm really paranoid about I don't want to have in another place then my head and hadware software only emphermeral. So I think with high paranoia or huge funds dices is probably the best way, IMO, but I doubt that a highly paranoid person would trust the entropy generated on the device....
[12:56] <m-relay> <j​effro256:monero.social> That's what the numpad would be for
[12:56] <m-relay> <j​effro256:monero.social> People who want to roll dice can enter 1-6
[12:57] <vthor> jeffro256, that is right, but if you worry about that, why you would use it in the first place? yes people who want to roll dices can enter 1-6 (yet a bit complicated, think of changing that to make the UX better) and maybe later this year I will come back and will port back a diceware scanner to the device (but again cam)
[12:59] <vthor> And hiting on a num pad I think it's bad entropy as long it's only the input and not other things about the entry, I would personaly believe more randomness is provided from a white wall via cam stream us by a user using the numpad, but just my opinion.
[13:01] <m-relay> <j​effro256:monero.social> That's what the hardware random number generator is for: true randomness based on provably random physical phenomenon
[13:03] <vthor> Next thing the os has in-/output from the kernel stripped (not verified yet), and that makes for me absolute sense. But again, a real paranoid person I doubt would use the device to generate the seed itself. I mean I would use it quick for 5-10xmr with cam, but all beyond, I would got with monero-gui/cli on tails.
[13:04] <m-relay> <j​effro256:monero.social> Not making a guess that a picture of a white wall might maybe have enough entropy. You could always add it into the equation, but that's a form of randomness that realistically the user is going to have to rely on the device that it is correct; the user is not going to go through each pixel of the image and do the calculations by hand to make sure the seed was derived right. And e<clipped message>
[13:04] <m-relay> <j​effro256:monero.social> ven if they did, they can't verify that the pixel values are actually correct measurements of light going into the camera. In short: the randomness from the camera is unverifiable to the paranoid user, so why just use a hardware device that is guaranteed to generate real true actual randomness?
[13:07] <m-relay> <r​ucknium:monero.social> IMHO the answer to "why not" is that vthor is going to do a direct port of bitcoin seedsigner to Monero. Doing more may be scope creep.
[13:08] <m-relay> <j​effro256:monero.social> Fair enough
[13:08] <vthor> garanteed from whom and how? I'm in a lot of applications hyperparanoid, often my liberty and my live could depend on it. And I never used a randomness generated by a yubi key, but wrote the key to the yubikey.
[13:09] <vthor> rucknium, thank you for the translation :)
[13:09] <m-relay> <r​ecanman:kernal.eu> Pooling entropy sources is something that can be done trivially, honestly, it would be better if you just used /dev/urandom + the camera or just camera or whatever for now and focus on other functionality
[13:11] <-- AtleoS (~AtleoS@user/AtleoS) has left this server (Ping timeout: 264 seconds).
[13:12] --> AtleoS (~AtleoS@user/AtleoS) has joined this channel.
[13:13] <vthor> I'm not so socially skilled and often write testaments instead of saying something so pecise, so that was really the compressed answer :) But I reasearched in the meanwhile that there should be a hwrng on the device. But 3-4 years ago I looked into it and I decided to not use the entropy on the device generated for secure communiction of my customers, so I guess it is worse as key material for something long living....
[13:13] <vthor> recanman: ack, I think that how it will be done, if there are no other concerns about.
[13:14] <m-relay> <r​ecanman:kernal.eu> Sounds good vthor
[13:14] <vthor> forgot to paste bcm2708-rng
[13:16] <vthor> any further concerns, where I could screw the users funds? I plan to use the same monero-python library to sign the transactions, I surely will not write own code for that as long it is not necessary.
[13:16] <m-relay> <j​effro256:monero.social> Is balance calculated on a hot device ? How are e-notes and key images transferred? Sorry I'm not super familiar with the original seedsigner project
[13:17] <vthor> Ah, how I have here collected knowledge, for multisign, do I understand it right that that one party needs to sign after another and then publich the transaction or is there a possibility that each party signs an publish the transaction and the miners merge it together?
[13:18] <m-relay> <r​ecanman:kernal.eu> First one
[13:19] <vthor> j​effro256: I think it needs to, but I'm not sure yet, I will make tests with oficial monero(-cli/gui) for offline signing. But I guess the hot wallet does provid all necessary data and its only singned on the device with checking the amount and target addresses before on device.
[13:20] <-- AtleoS (~AtleoS@user/AtleoS) has left this server (Ping timeout: 268 seconds).
[13:20] <vthor> what are e-notes and key images?
[13:21] <vthor> the unsigned transaction will be transfered via animated QR (UR) from the view key only wallet, and in the same way back the signed transaction for pulishing to the hot view key only wallet.
[13:22] <vthor> recanman, thought so :(
[13:23] <m-relay> <j​effro256:monero.social> Air gapped multisig is kinda hell in Monero right now since you need to 1) scan e-enotes with hot wallet, 2) send e-notes to cold wallet, 3) calculate partial keys, 4) retreive partial key images from cold wallet, 5) disseminate partial key images to other signers, 6) collect partial key images from other signers, 7) send other's partial key images to cold wallet, 8) construct par<clipped message>
[13:23] <m-relay> <j​effro256:monero.social> tially signed tx on cold wallet 9) pull partial tx from cold wallet, 10) pass around transaction to other signers, 11) have final signer broadcast the transaction
[13:23] <m-relay> <j​effro256:monero.social> For your first cycle, you might want to not worry about multisig ;)
[13:24] <m-relay> <j​effro256:monero.social> FCMP+SA+L makes all this significantly easier since we don't have to sync partial key images
